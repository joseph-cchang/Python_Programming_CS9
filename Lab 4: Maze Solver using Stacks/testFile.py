# testFile

from Stack import Stack
from lab04 import *

def test_solveMaze():

        maze = [
        ['+', '+', '+', '+', 'G', '+'],
        ['+', ' ', '+', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+', '+'],
        ['+', ' ', '+', '+', ' ', '+'],
        ['+', ' ', ' ', ' ', ' ', '+'],
        ['+', '+', '+', '+', '+', '+'] ]

        assert solveMaze(maze, 4, 4) == True

        assert maze == [
        ['+', '+', '+', '+', 'G', '+'],
        ['+', 8  , '+', 11 , 12 , '+'],
        ['+', 7  , 9  , 10 , '+', '+'],
        ['+', 6  , '+', '+', 2  , '+'],
        ['+', 5  , 4  , 3  , 1  , '+'],
        ['+', '+', '+', '+', '+', '+'] ]

def test_G_in_middle():
        
        maze2 = [
        ['+', '+', '+', '+', '+', '+', '+'],
        ['+', ' ', '+', '+', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', ' ', ' ', '+'],
        ['+', ' ', '+', ' ', 'G', ' ', '+'],
        ['+', ' ', ' ', ' ', ' ', ' ', '+'],
        ['+', '+', '+', '+', '+', '+', '+'] ]

        assert solveMaze(maze2, 4, 2) == True

        assert maze2 == [
        ['+', '+', '+', '+', '+', '+', '+'],
        ['+', 5  , '+', '+', ' ', ' ', '+'],
        ['+', 4  , 6  , 7  , ' ', ' ', '+'],
        ['+', 3  , '+', 8  , 'G', ' ', '+'],
        ['+', 2  , 1  , 9  , 10 , ' ', '+'],
        ['+', '+', '+', '+', '+', '+', '+'] ]


def test_blocked_path():

        maze = [
        ['+', '+', '+', '+', 'G', '+'],
        ['+', ' ', '+', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+', '+'],
        ['+', ' ', '+', '+', ' ', '+'],
        ['+', '+', ' ', ' ', ' ', '+'],
        ['+', '+', '+', '+', '+', '+'] ]

        assert solveMaze(maze, 4, 4) == False

        assert maze == [
        ['+', '+', '+', '+', 'G', '+'],
        ['+', ' ', '+', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+', '+'],
        ['+', ' ', '+', '+', 2  , '+'],
        ['+', '+', 4  , 3  , 1  , '+'],
        ['+', '+', '+', '+', '+', '+'] ]


def test_small_maze():
        
        maze3 = [
        ['+', '+', '+', '+', '+'],
        ['+', ' ', ' ', 'G', '+'],
        ['+', '+', '+', '+', '+'] ]

        assert solveMaze(maze3, 1, 2) == True

        maze3 = [
        ['+', '+', '+', '+', '+'],
        ['+', ' ', 1  , 'G', '+'],
        ['+', '+', '+', '+', '+'] ]

def dead_end():

        my_maze = [
        ['+', '+', '+', '+', '+', '+'],
        ['+', ' ', '+', ' ', 'G', '+'],
        ['+', ' ', ' ', ' ', ' ', '+'],
        ['+', ' ', '+', '+', '+', '+'],
        ['+', ' ', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', ' ', '+'],
        ['+', '+', '+', '+', '+', '+'] ]

        assert solveMaze(my_maze, 4, 5) == True

        my_maze = [
        ['+', '+', '+', '+', '+', '+'],
        ['+', 8  , '+', 11 , 'G', '+'],
        ['+', 7  , 9  , 10 , ' ', '+'],
        ['+', 6  , '+', '+', '+', '+'],
        ['+', 5  ,  4 , ' ', ' ', '+'],
        ['+', ' ', 3  , 2  , 1  , '+'],
        ['+', '+', '+', '+', '+', '+'] ]


        
        
